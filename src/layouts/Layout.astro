---
interface Props {
	title: string;
}

const { title } = Astro.props;
const { cookies, url } = Astro;
const currentPath = url.pathname;
const isAuthenticated = cookies.has('auth-token');

// Redirect to login if not authenticated
if (!isAuthenticated) {
	return Astro.redirect(`/login?redirect=${currentPath}`);
}
---

<!doctype html>
<html lang="en" class="antialiased">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Inventory Management System" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script>
			// On page load or when changing themes, best to add inline in `head` to avoid FOUC
			if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}
		</script>
	</head>
	<body class="min-h-screen antialiased bg-white dark:bg-slate-950">
		<header class="bg-white dark:bg-slate-900 border-b dark:border-slate-800 border-slate-200">
			<nav class="mx-auto px-4 sm:px-6 lg:px-8">
				<div class="flex h-16 items-center justify-between">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<span class="text-xl font-bold dark:text-white">Inventory</span>
						</div>
						<div class="hidden md:block">
							<div class="ml-10 flex items-baseline space-x-4">
								<a href="/home" class={`${currentPath === '/home' ? 'bg-slate-100 dark:bg-slate-800' : ''} px-3 py-2 rounded-md text-sm font-medium dark:text-slate-300 text-slate-900 hover:bg-slate-100 dark:hover:bg-slate-800`}>Home</a>
								<a href="/" class={`${currentPath === '/' ? 'bg-slate-100 dark:bg-slate-800' : ''} px-3 py-2 rounded-md text-sm font-medium dark:text-slate-300 text-slate-900 hover:bg-slate-100 dark:hover:bg-slate-800`}>Products</a>
							</div>
						</div>
					</div>
					<div class="flex items-center space-x-4">
						<button id="theme-toggle" type="button" class="text-slate-500 dark:text-slate-400 hover:bg-slate-100 dark:hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-200 dark:focus:ring-slate-700 rounded-lg text-sm p-2.5">
							<svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
								<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
							</svg>
							<svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
								<path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
							</svg>
						</button>
						{isAuthenticated && (
							<button id="logout-button" class="text-red-600 hover:text-red-500 dark:text-red-500 dark:hover:text-red-400 text-sm font-medium">
								Logout
							</button>
						)}
					</div>
					<!-- Mobile menu button -->
					<div class="-mr-2 flex md:hidden">
						<button type="button" id="mobile-menu-button" class="inline-flex items-center justify-center rounded-md p-2 text-slate-400 hover:bg-slate-100 hover:text-slate-500 dark:hover:bg-slate-800 dark:hover:text-slate-300 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500">
							<span class="sr-only">Open main menu</span>
							<svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
							</svg>
						</button>
					</div>
				</div>
			</nav>
			<!-- Mobile menu -->
			<div class="hidden md:hidden" id="mobile-menu">
				<div class="space-y-1 px-2 pb-3 pt-2">
					<a href="/home" class={`${currentPath === '/home' ? 'bg-slate-100 dark:bg-slate-800' : ''} block px-3 py-2 rounded-md text-base font-medium dark:text-slate-300 text-slate-900 hover:bg-slate-100 dark:hover:bg-slate-800`}>Home</a>
					<a href="/" class={`${currentPath === '/' ? 'bg-slate-100 dark:bg-slate-800' : ''} block px-3 py-2 rounded-md text-base font-medium dark:text-slate-300 text-slate-900 hover:bg-slate-100 dark:hover:bg-slate-800`}>Products</a>
					{isAuthenticated && (
						<button id="mobile-logout-button" class="w-full text-left px-3 py-2 rounded-md text-base font-medium text-red-600 hover:bg-slate-100 dark:text-red-500 dark:hover:bg-slate-800">
							Logout
						</button>
					)}
				</div>
			</div>
		</header>
		<main>
			<slot />
		</main>

		<script>
			// Theme toggle functionality
			function initTheme() {
				const themeToggleBtn = document.getElementById('theme-toggle');
				const darkIcon = document.getElementById('theme-toggle-dark-icon');
				const lightIcon = document.getElementById('theme-toggle-light-icon');

				// Set initial icon state
				if (document.documentElement.classList.contains('dark')) {
					darkIcon?.classList.add('hidden');
					lightIcon?.classList.remove('hidden');
				} else {
					darkIcon?.classList.remove('hidden');
					lightIcon?.classList.add('hidden');
				}

				function setTheme(isDark) {
					if (isDark) {
						document.documentElement.classList.add('dark');
						localStorage.theme = 'dark';
						darkIcon?.classList.add('hidden');
						lightIcon?.classList.remove('hidden');
					} else {
						document.documentElement.classList.remove('dark');
						localStorage.theme = 'light';
						darkIcon?.classList.remove('hidden');
						lightIcon?.classList.add('hidden');
					}
				}

				// Theme toggle handler
				themeToggleBtn?.addEventListener('click', () => {
					const isDark = !document.documentElement.classList.contains('dark');
					setTheme(isDark);
				});

				// Watch for system theme changes
				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
					if (!localStorage.theme) {
						setTheme(e.matches);
					}
				});
			}

			// Logout functionality
			function initLogout() {
				const logoutButtons = document.querySelectorAll('#logout-button, #mobile-logout-button');
				
				logoutButtons.forEach(button => {
					button.addEventListener('click', async () => {
						try {
							const response = await fetch('/api/auth/logout', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json'
								}
							});

							if (response.ok) {
								window.location.href = '/login';
							} else {
								console.error('Logout failed');
							}
						} catch (error) {
							console.error('Logout error:', error);
						}
					});
				});
			}

			// Initialize all functionality
			document.addEventListener('DOMContentLoaded', () => {
				initTheme();
				initLogout();
			});

			// Mobile menu functionality
			const mobileMenuButton = document.getElementById('mobile-menu-button');
			const mobileMenu = document.getElementById('mobile-menu');

			mobileMenuButton?.addEventListener('click', () => {
				mobileMenu?.classList.toggle('hidden');
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--font-fallback: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
		--font-body: system-ui, var(--font-fallback);
		--font-mono: "SF Mono", "IBM Plex Mono", "DejaVu Sans Mono", Menlo, Consolas, monospace;
	}
	html {
		font-family: var(--font-body);
		scroll-behavior: smooth;
	}
	body {
		margin: 0;
	}
	code {
		font-family: var(--font-mono);
	}
</style>
