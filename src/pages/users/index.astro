---
import Layout from '../../layouts/Layout.astro';
import { db } from '../../db';
import { users } from '../../db/schema';
import { desc } from 'drizzle-orm';

// Get the current user from the cookie
const authToken = Astro.cookies.get('auth-token')?.value;
const currentUser = authToken ? JSON.parse(authToken) : null;

// Check if user is admin
if (!currentUser || currentUser.role !== 'admin') {
  return Astro.redirect('/');
}

// Get all users
const userList = await db.select().from(users).orderBy(desc(users.created_at)).all();

function formatDate(date: Date | null) {
  if (!date) return '-';
  return new Date(date).toLocaleString();
}
---

<Layout title="User Management">
  <div class="min-h-screen transition-colors duration-300 dark:bg-slate-950 bg-slate-50">
    <div class="px-4 py-6">
      <div class="flex flex-col gap-4">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <h2 class="text-2xl font-bold tracking-tight dark:text-slate-50 text-slate-900">User Management</h2>
          <button id="openAddModal" class="inline-flex items-center justify-center rounded-md text-sm font-medium h-9 px-4 bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-500 transition-colors">
            Add User
          </button>
        </div>

        <!-- User Table -->
        <div class="overflow-x-auto rounded-lg border dark:border-slate-800 border-slate-200">
          <table class="min-w-full divide-y dark:divide-slate-800 divide-slate-200">
            <thead class="dark:bg-slate-900 bg-slate-100">
              <tr>
                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Username</th>
                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Role</th>
                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Created</th>
                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Last Login</th>
                <th class="px-4 py-3 text-center text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Status</th>
                <th class="px-4 py-3 text-center text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="divide-y dark:divide-slate-800 divide-slate-200 dark:bg-slate-900 bg-white">
              {userList.map((user) => (
                <tr class="dark:hover:bg-slate-800 hover:bg-slate-50">
                  <td class="px-4 py-3 dark:text-slate-300">{user.username}</td>
                  <td class="px-4 py-3 dark:text-slate-300">
                    <span class={`inline-flex items-center px-2 py-1 rounded text-xs font-medium ${
                      user.role === 'admin' 
                        ? 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-400' 
                        : 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400'
                    }`}>
                      {user.role}
                    </span>
                  </td>
                  <td class="px-4 py-3 dark:text-slate-300">{formatDate(user.created_at)}</td>
                  <td class="px-4 py-3 dark:text-slate-300">{formatDate(user.last_login)}</td>
                  <td class="px-4 py-3 text-center">
                    {user.locked_until && new Date(user.locked_until) > new Date() ? (
                      <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400">
                        Locked
                      </span>
                    ) : (
                      <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400">
                        Active
                      </span>
                    )}
                  </td>
                  <td class="px-4 py-3 text-center space-x-2">
                    <button class="text-blue-500 hover:text-blue-400 dark:text-blue-400 dark:hover:text-blue-300" data-edit-id={user.id}>Edit</button>
                    {user.id !== currentUser.id && (
                      <button class="text-red-500 hover:text-red-400 dark:text-red-400 dark:hover:text-red-300" data-delete-id={user.id}>Delete</button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Add User Modal -->
  <div id="userModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
    <div class="bg-white dark:bg-slate-900 rounded-lg max-w-md w-full">
      <div class="p-6">
        <h3 class="text-lg font-semibold dark:text-slate-50 text-slate-900 mb-4" id="modalTitle">Add User</h3>
        <form id="userForm" class="space-y-4">
          <input type="hidden" name="id" />
          <div>
            <label class="block text-sm font-medium dark:text-slate-300 text-slate-700">Username</label>
            <input type="text" name="username" required
              class="mt-1 block w-full rounded-md dark:bg-slate-800 bg-white border dark:border-slate-600 border-slate-300 dark:text-slate-300 text-slate-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:focus:border-blue-400 dark:focus:ring-blue-400" />
          </div>
          
          <div>
            <label class="block text-sm font-medium dark:text-slate-300 text-slate-700">Password</label>
            <input type="password" name="password" required
              class="mt-1 block w-full rounded-md dark:bg-slate-800 bg-white border dark:border-slate-600 border-slate-300 dark:text-slate-300 text-slate-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:focus:border-blue-400 dark:focus:ring-blue-400" />
          </div>

          <div>
            <label class="block text-sm font-medium dark:text-slate-300 text-slate-700">Role</label>
            <select name="role" required
              class="mt-1 block w-full rounded-md dark:bg-slate-800 bg-white border dark:border-slate-600 border-slate-300 dark:text-slate-300 text-slate-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:focus:border-blue-400 dark:focus:ring-blue-400">
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          
          <div class="flex justify-end space-x-3 mt-6">
            <button type="button" id="cancelUser"
              class="px-4 py-2 text-sm font-medium bg-slate-200 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 rounded-md hover:bg-slate-300 dark:hover:bg-slate-600">
              Cancel
            </button>
            <button type="submit"
              class="px-4 py-2 text-sm font-medium bg-blue-600 text-white rounded-md hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-500">
              Save
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  const modal = document.getElementById('userModal');
  const form = document.getElementById('userForm') as HTMLFormElement;
  const modalTitle = document.getElementById('modalTitle');
  const openAddButton = document.getElementById('openAddModal');
  const cancelButton = document.getElementById('cancelUser');

  // Open modal for adding new user
  openAddButton?.addEventListener('click', () => {
    if (modalTitle) modalTitle.textContent = 'Add User';
    form?.reset();
    modal?.classList.remove('hidden');
  });

  // Close modal
  cancelButton?.addEventListener('click', () => {
    modal?.classList.add('hidden');
    form?.reset();
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    const isEdit = !!data.id;

    try {
      const response = await fetch(`/api/users${isEdit ? `/${data.id}` : ''}`, {
        method: isEdit ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to save user');
      }
    } catch (error) {
      console.error('Error saving user:', error);
      alert('Failed to save user');
    }
  });

  // Handle edit button clicks
  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('[data-edit-id]')) {
      const id = target.dataset.editId;
      try {
        const response = await fetch(`/api/users/${id}`);
        if (!response.ok) throw new Error('Failed to fetch user');
        
        const user = await response.json();
        if (modalTitle) modalTitle.textContent = 'Edit User';
        form.elements.namedItem('id').value = user.id;
        form.elements.namedItem('username').value = user.username;
        form.elements.namedItem('role').value = user.role;
        (form.elements.namedItem('password') as HTMLInputElement).required = false;
        modal?.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching user:', error);
        alert('Failed to load user details');
      }
    }
  });

  // Handle delete button clicks
  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('[data-delete-id]')) {
      if (confirm('Are you sure you want to delete this user?')) {
        const id = target.dataset.deleteId;
        try {
          const response = await fetch(`/api/users/${id}`, { method: 'DELETE' });
          if (response.ok) {
            window.location.reload();
          } else {
            const error = await response.json();
            alert(error.message || 'Failed to delete user');
          }
        } catch (error) {
          console.error('Error deleting user:', error);
          alert('Failed to delete user');
        }
      }
    }
  });
</script> 