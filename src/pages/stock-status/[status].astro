---
import Layout from '../../layouts/Layout.astro';
import { db } from '../../db';
import { products } from '../../db/schema';
import { sql } from 'drizzle-orm';

const { status } = Astro.params;
const page = Number(Astro.url.searchParams.get('page') || '1');
const perPage = 200;
const offset = (page - 1) * perPage;

// Define status conditions
const statusConditions = {
    'sold-out': sql`stock <= 0`,
    'low-stock': sql`stock > 0 AND stock < restock_level`,
    'medium-stock': sql`stock >= restock_level AND stock < (restock_level * 3)`,
    'high-stock': sql`stock >= (restock_level * 3)`
};

const condition = statusConditions[status];
if (!condition) {
    return Astro.redirect('/404');
}

// Get total count for pagination
const [{ count }] = await db.select({
    count: sql`count(*)`
}).from(products).where(condition).all();

// Get products for current page
const productList = await db.select()
    .from(products)
    .where(condition)
    .limit(perPage)
    .offset(offset)
    .orderBy(sql`name`)
    .all();

const totalPages = Math.ceil(Number(count) / perPage);

// Helper function to generate page title
function getPageTitle(status: string) {
    switch (status) {
        case 'sold-out': return 'Sold Out Products';
        case 'low-stock': return 'Low Stock Products';
        case 'medium-stock': return 'Medium Stock Products';
        case 'high-stock': return 'High Stock Products';
        default: return 'Products';
    }
}

// Helper function to get status color scheme
function getStatusColors(status: string) {
    switch (status) {
        case 'sold-out': return {
            bg: 'bg-red-50 dark:bg-red-900/20',
            border: 'border-red-200 dark:border-red-800',
            text: 'text-red-700 dark:text-red-400'
        };
        case 'low-stock': return {
            bg: 'bg-orange-50 dark:bg-orange-900/20',
            border: 'border-orange-200 dark:border-orange-800',
            text: 'text-orange-700 dark:text-orange-400'
        };
        case 'medium-stock': return {
            bg: 'bg-green-50 dark:bg-green-900/20',
            border: 'border-green-200 dark:border-green-800',
            text: 'text-green-700 dark:text-green-400'
        };
        case 'high-stock': return {
            bg: 'bg-blue-50 dark:bg-blue-900/20',
            border: 'border-blue-200 dark:border-blue-800',
            text: 'text-blue-700 dark:text-blue-400'
        };
        default: return {
            bg: 'bg-slate-50 dark:bg-slate-900/20',
            border: 'border-slate-200 dark:border-slate-800',
            text: 'text-slate-700 dark:text-slate-400'
        };
    }
}

const colors = getStatusColors(status);
const title = getPageTitle(status);
---

<Layout title={title}>
    <div class="min-h-screen transition-colors duration-300 dark:bg-slate-950 bg-slate-50">
        <div class="px-4 py-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold tracking-tight dark:text-slate-50 text-slate-900">{title}</h2>
                <a href="/" class="text-sm font-medium text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-200">
                    ‚Üê Back to Dashboard
                </a>
            </div>

            <!-- Products Table -->
            <div class="bg-white dark:bg-slate-900 border dark:border-slate-800 border-slate-200 rounded-lg overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y dark:divide-slate-800 divide-slate-200">
                        <thead class="dark:bg-slate-900/50 bg-slate-50">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Code</th>
                                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Name</th>
                                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">UOM</th>
                                <th class="px-4 py-3 text-right text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Price</th>
                                <th class="px-4 py-3 text-right text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Stock</th>
                                <th class="px-4 py-3 text-right text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Restock Level</th>
                                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Location</th>
                                <th class="px-4 py-3 text-left text-xs font-medium dark:text-slate-400 text-slate-500 uppercase tracking-wider">Supplier</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y dark:divide-slate-800 divide-slate-200">
                            {productList.map((product) => (
                                <tr class="dark:hover:bg-slate-800 hover:bg-slate-50">
                                    <td class="px-4 py-3 dark:text-slate-300">{product.code}</td>
                                    <td class="px-4 py-3 dark:text-slate-300">{product.name}</td>
                                    <td class="px-4 py-3 dark:text-slate-300">{product.uom}</td>
                                    <td class="px-4 py-3 text-right dark:text-slate-300">${product.price.toFixed(2)}</td>
                                    <td class="px-4 py-3 text-right dark:text-slate-300">{product.stock}</td>
                                    <td class="px-4 py-3 text-right dark:text-slate-300">{product.restock_level}</td>
                                    <td class="px-4 py-3 dark:text-slate-300">{product.stock_location || '-'}</td>
                                    <td class="px-4 py-3 dark:text-slate-300">{product.supplied_by || '-'}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                {totalPages > 1 && (
                    <div class="px-4 py-3 flex items-center justify-between border-t dark:border-slate-800 border-slate-200">
                        <div class="flex-1 flex justify-between sm:hidden">
                            <a href={`/stock-status/${status}?page=${page - 1}`} 
                               class={`relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-md ${colors.text} ${colors.bg} ${colors.border} ${page === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-opacity-75'}`}
                               aria-disabled={page === 1}>
                                Previous
                            </a>
                            <a href={`/stock-status/${status}?page=${page + 1}`}
                               class={`relative inline-flex items-center px-4 py-2 text-sm font-medium rounded-md ${colors.text} ${colors.bg} ${colors.border} ${page === totalPages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-opacity-75'}`}
                               aria-disabled={page === totalPages}>
                                Next
                            </a>
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm dark:text-slate-400 text-slate-700">
                                    Showing <span class="font-medium">{offset + 1}</span> to <span class="font-medium">{Math.min(offset + perPage, Number(count))}</span> of <span class="font-medium">{count}</span> results
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
                                        <a href={`/stock-status/${status}?page=${pageNum}`}
                                           class={`relative inline-flex items-center px-4 py-2 text-sm font-medium ${pageNum === page ? `${colors.text} ${colors.bg}` : 'dark:text-slate-400 text-slate-500 hover:bg-slate-50 dark:hover:bg-slate-800'} ${colors.border}`}>
                                            {pageNum}
                                        </a>
                                    ))}
                                </nav>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    </div>
</Layout>